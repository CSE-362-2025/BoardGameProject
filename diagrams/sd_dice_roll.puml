@startuml SequenceDiagram: Dice roll and movement for human player
actor User
participant UI
participant GameManager
participant Player
participant Board
participant Tile
participant Event

User -> UI: Click "Roll Dice"
UI -> GameManager: roll_dice()
GameManager -> GameManager: dice_roll()
GameManager -> Player: move(dice_roll)

alt There is a StopTile at some position in the move


        GameManager -> Board: get_tile(position)
        Board --> GameManager: StopTile
        GameManager -> Event: meet_criteria(Player)
        Event --> GameManager: true

        alt Player meets criteria

            alt StopTile has a decision Event
                GameManager -> UI: display_decision_event(Event)
                UI -> User: Choose option
                User -> UI: Click "Option"
                UI -> UI: display_message(string)
                UI -> GameManager: event_choice(Event, choice_idx)
                GameManager -> Event: apply_result(Player, choice_idx)

            else StopTile has a non-decision Event
                GameManager -> UI: display_non_decision_event(Event)
                UI -> User: OK
                User -> UI: Click "OK"
                UI -> UI: display_message(string)
                UI -> GameManager: accept_event(Event)
                GameManager -> Event: apply_result(Player)
            end

            GameManager -> Player: store_event(Event, choice_idx)

        else Player stats don't meet the criteria for the event
            Event --> GameManager: false
            GameManager -> UI: display_message("You don't meet the criteria for this event")
        end

else No StopTile in the move

    alt Player lands on EventTile

        loop Until the Player meets the criteria of the Event
            GameManager -> GameManager: get_random_event()
            GameManager -> Event: meet_criteria(Player)
            Event --> GameManager: false
        end
    
        Event --> GameManager: true

        alt Player lands on Decision EventTile
            GameManager -> UI: display_decision_event(Event)
            UI -> User: Choose option
            User -> UI: Click "Option"
            UI -> GameManager: event_choice(Event, choice_idx)
            GameManager -> Event: apply_result(Player, choice_idx)


        else Player lands on Non-decision EventTile
            Event --> GameManager: true
            GameManager -> UI: display_non_decision_event(Event)
            UI -> User: OK
            User -> UI: Click "OK"
            UI -> GameManager: accept_event(Event)
            GameManager -> Event: apply_result(Player)

        end
        
        GameManager -> Player: store_event(Event, choice_idx)
    
    else Player lands on GoodTile or BadTile
        GameManager -> UI: display_message(string)

        alt Player lands on GoodTile
            GameManager -> GameManager: generate_good_tile_effects()
        else Player lands on BadTile
            GameManager -> GameManager: generate_bad_tile_effects()
        end

        GameManager -> Player: change_stats(Dict<string, int>): void
        GameManager -> UI: display_message("Stats changed...")

    end
end

GameManager -> GameManager: switch_turn()
GameManager -> UI: display_board()
GameManager -> UI: display_stats()

@enduml
