@startuml class_diagram
title "Class Diagram"
' skinparam shadowing false
' skinparam classAttributeIconSize 0

class GameDatabase {
    
    - connection: sqlite3.Connection
    - cursor: sqlite3.Cursor

    + connect(db_name: str): bool
    + save_game(game_manager: GameManager): bool
    + load_game(game_manager: GameManager): bool
    + clear_database(): bool
    + close_connection(): void

}

class Board {

    - tiles: list<Tile>
    - size: int

    + get_tile(position: int): Tile
    + get_player_positions(players: list<Player>): dict<Player, int>
}

abstract class Tile {

    - position: int
    - tile_type: string

    + get_position(): int
    + get_type(): string
}

class GoodTile {
}

class BadTile {
}

class EventTile {
}

class StopTile {
    - event: Event
    - paths: list<tile_index: int>

}

class Player {

    - name: string
    - color: color
    - position: int
    - stats: dict<string, int> {bilingual, athletic, academic, military, social}
    - events_played: list[event_id: int]
    - has_moved: bool
    - branch: bool
    - next_pos: int
    - on_alt_path: bool

    + move(spaces: int): Tile
    + store_event(Event, choice_idx): void
    + change_stats(stats: dict<string, int>): void
    + get_stats(): dict<string, int>

}

class ComputerPlayer {

    + make_decision(event: Event): int
}

class Event {

    - name: string
    - description: string
    - choices: list<text, result, criteria>
    - rarity: int
    - phase: string
    - id: int

    + meet_criteria(player: Player): bool
    + get_type(self): string
    + apply_result(player: Player, choice_idx: int): void
}


class GameManager {

    - board: Board
    - players: list<Player>
    - turn_count: int
    - events: list<Event>
    - ui: UI
    - game_database: GameDatabase
    - current_player: Player

    + play_turn(dice_value: int): void
    + play_computer_turn(): void
    + game_start(): void
    + game_end(): void
    + switch_turn(): int
    + roll_dice(): int
    + get_random_event(): Event
    + is_game_over(): bool
    + event_choice(event: Event, choice_idx: int): void
    + branching_event_choice(event: Event, choice_idx: int)
    + get_random_event(): Event
    + is_game_over: bool
    + generate_good_tile_effects(): Dict<string, int>
    + generate_bad_tile_effects(): Dict<string, int>
}

class UI {

    - game_manager: GameManager
    - player: Player
    - screen: PyGame
    - font: PyGame
    - dice_value: int
    - message: string
    - message_duration: int

    + update(): void
    + display_board(board: Board, players: list<Player>): void
    + display_stats(): void
    + display_dice(): void
    + display_decision_event(event: Event): void
    + display_stoptile_event(event: Event): void
    + display_computer_decision(event: Event, choice_idx: int): void
    + display_message(message: string): void
    + display_current_turn(): void
    + change_current_player(player: Player): void
    + display_roll(roll: int): void
}


' Relationships

Board "1" -- "0..*" Tile : "has"
GameDatabase "1" -- "1" GameManager : "saves/loads"
GameManager "1" -- "0..4*" Player : "manages"
GameManager "1" -- "1" Board : "has"
GameManager "1" -- "0.." Event : "has"
UI "1" -- "1" GameManager : "displays"
Tile <|-- GoodTile
Tile <|-- BadTile
Tile <|-- EventTile
Tile <|-- StopTile
Player <|-- ComputerPlayer


@enduml