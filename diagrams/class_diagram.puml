@startuml class_diagram
title "Class Diagram"
' skinparam shadowing false
' skinparam classAttributeIconSize 0

class GameDatabase {
    
    - connection: sqlite3.Connection
    - cursor: sqlite3.Cursor

    + connect(db_name: str): void
    + save_game(game_manager: GameManager): void
    + load_game(game_manager: GameManager): void
    + clear_database(): void
    + close_connection(): void

}

class Board {

    - tiles: list<Tile>
    - size: int

    + get_tile(position: int): Tile
    + display(): void
    + get_player_positions(players: list<Player>): dict<Player, int>
}

abstract class Tile {

    - position: int
    - tile_type: string

    + get_position(): int
    + get_type(): string
}

class GoodTile {
    - message: string
    - effect: dict<string, int>

    + apply_good_effect(player: Player): void
}

class BadTile {
    - message: string
    - effect: dict<string, int>

    + apply_bad_effect(player: Player): void
}

class EventTile {
    - event: Event

    + trigger_event(player: Player): void
}

class StopTile {
    - event: Event

    + trigger_event(player: Player): void
}

class Player {

    - name: string
    - position: int
    - stats: dict<string, int> {bilingual, athletic, academic, military, social}

    + hop(): void
    + change_stats(stats: dict<string, int>): void
    + apply_event(event: Event): void
    + choose_option(event: Event, choice_idx: int): void
    + get_stats(): dict<string, int>

}

class ComputerPlayer {

    + make_decision(event: Event): int
}

class Event {

    - name: string
    - description: string
    - criteria: dict<string, int>
    - result: dict<string, int>

    + trigger(player: Player): void
}

class NonDecisionEvent {

    + apply_result(player: Player): void
}

class DecisionEvent {
    - choices: list<string>

    + apply_result(player: Player, choice_idx: int): void
    + show_choices(): void
}


class GameManager {

    - board: Board
    - players: list<Player>
    - turn_count: int

    + game_start(): void
    + game_end(): void
    + switch_turn(): int
    + roll_dice(): int
    + is_game_over(): bool
}

class UI {

    - game_manager: GameManager
    - player: Player

    + display_board(): void
    + display_stats(): void
    + display_event(event: Event): void
    + prompt_choice(options: list<string>): int
    + display_message(message: string): void
}


' Relationships

Player "1" -- "1..1*" Tile : "lands on"
GameDatabase "1" -- "0..*" Player : "stores"
GameDatabase "1" -- "1" GameManager : "saves/loads"
GameManager "1" -- "0..*" Player : "manages"
GameManager "1" -- "1" Board : "has"
UI "1" -- "1" GameManager : "displays"
UI "1" -- "0..1" Player : "shows stats"
EventTile "1" -- "1" Event : "triggers"
StopTile "1" -- "1" Event : "triggers"
Tile <|-- GoodTile
Tile <|-- BadTile
Tile <|-- EventTile
Tile <|-- StopTile
Event <|-- NonDecisionEvent
Event <|-- DecisionEvent
Player <|-- ComputerPlayer


@enduml